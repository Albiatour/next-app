import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { hexToRGB, isDark } from '../lib/color'

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// Force no cache pour mise à jour immédiate
export const revalidate = 0

// Récupérer les données restaurant côté serveur
async function getRestaurant(slug) {
  try {
    // En production, utiliser l'URL complète ou variable d'environnement
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const res = await fetch(`${baseUrl}/api/restaurant?slug=${slug}`, {
      cache: 'no-store'
    })
    
    if (!res.ok) throw new Error(`HTTP ${res.status}`)
    return await res.json()
  } catch (err) {
    console.error('[layout] Error fetching restaurant:', err)
    return null
  }
}

export default async function RootLayout({ children }) {
  // Récupérer le slug depuis l'env (mono-restaurant)
  const slug = process.env.NEXT_PUBLIC_RESTAURANT_SLUG || 'bistro'
  const restaurant = await getRestaurant(slug)
  
  // Calculer la couleur brand et le contraste
  const brandHex = restaurant?.brand_hex?.trim()
  const valid = brandHex && /^#([0-9a-fA-F]{6})$/.test(brandHex)
  
  let brandRGB
  if (valid) {
    brandRGB = hexToRGB(brandHex)
  } else {
    console.warn('[layout] brand_hex manquant/invalide pour', restaurant?.slug, '→ utilise fallback cyan-700')
    brandRGB = '14 116 144' // cyan-700 fallback temporaire
  }
  
  const contrast = valid && isDark(brandHex) ? 'dark' : 'light'
  
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <div
          key={slug}
          style={{ '--brand': brandRGB }}
          data-brand-contrast={contrast}
          className="min-h-dvh"
        >
          {children}
        </div>
      </body>
    </html>
  );
}
